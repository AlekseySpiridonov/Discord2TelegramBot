name: Publish

on:
  release:
    types: [created]
  push:
    branches:
    - dev

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: d2t-bot

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Set SHA version for dev branch
        if: github.ref == 'refs/heads/dev'
        run: mvn versions:set -DgenerateBackupPoms=false -DnewVersion="1.0-dev-${GITHUB_SHA::8}"

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Push Maven GitHub Package
        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push Docker Image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          [[ "${{ github.ref }}" == "refs/heads/dev" ]] && VERSION="1.0-dev-${GITHUB_SHA::8}"
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "Push Docker Image"
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          if [[ "${{ github.ref }}" != "refs/heads/dev" ]] ; then
            echo "Push LATEST Docker Image"
            docker tag $IMAGE_NAME $IMAGE_ID:latest
            docker push $IMAGE_ID:latest
          fi


